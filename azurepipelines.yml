trigger:
- master

resources:
  repositories:
    - repository: AzureDevOps-Release-Pipeline
      type: github
      name: aparnaqa1998/AzureDevOps-Release-Pipeline
      endpoint: aparnaqa1998

variables:
  dockerRegistryServiceConnection: 'c19b7425-2eb4-4f79-9f19-d290afb65bd4'
  imageRepository: 'demonodeapp'
  containerRegistry: 'demonodeapp.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'demonodeapp-secret'
  vmImageName: 'ubuntu-latest'
  ACR_NAME: 'demonodeapp'
  ACR_USERNAME: $(ACR_USERNAME) # Set as secret pipeline variable
  ACR_PASSWORD: $(ACR_PASSWORD) # Set as secret pipeline variable

stages:
- stage: Build
  displayName: Build stage
  
  jobs:
  - job: Build
    displayName: Build
    pool: 
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Docker Login
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)

    - script: |
        echo $(ACR_PASSWORD) | docker login $(ACR_NAME).azurecr.io -u $(ACR_USERNAME) --password-stdin
      displayName: 'Login to ACR'
      
    - script: |
        # Build Docker image
        docker build -t $(imageRepository):$(tag) .
      displayName: 'Build Docker Image'
      
    - script: |
        # Run Docker container to generate coverage reports
        docker run --rm -v $(Build.SourcesDirectory)/coverage:/coverage $(imageRepository):$(tag)
      displayName: 'Run Docker Container and Generate Coverage Reports'
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
       repository: $(imageRepository)
       command:  buildAndPush
       dockerfile: $(dockerfilePath)
       containerRegistry: $(dockerRegistryServiceConnection)
       tags: |
        $(tag)
    - upload: manifests
      artifact: manifests
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Coverage Reports'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/coverage'
        ArtifactName: 'coverage-reports'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'releasepipeline.kube-public'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
