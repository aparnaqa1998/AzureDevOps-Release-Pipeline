trigger:
- master

resources:
  repositories:
    - repository: AzureDevOps-Release-Pipeline
      type: github
      name: aparnaqa1998/AzureDevOps-Release-Pipeline
      endpoint: aparnaqa1998

variables:
  dockerRegistryServiceConnection: 'c19b7425-2eb4-4f79-9f19-d290afb65bd4'
  imageRepository: 'demonodeapp'
  containerRegistry: 'demonodeapp.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'demonodeapp-secret'
  vmImageName: 'ubuntu-latest'
  ACR_NAME: 'demonodeapp'

stages:
- stage: Build
  displayName: Build stage
  
  jobs:
  - job: Build
    displayName: Build
    pool: 
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Docker Login
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)

    - bash: |
        echo $ENV_ACR_PASSWORD | docker login $(ACR_NAME).azurecr.io -u $ENV_ACR_USERNAME --password-stdin
        docker build -t $(imageRepository):$(tag) .
        docker run --rm -v $(Build.SourcesDirectory)/coverage:/usr/src/app/coverage $(ACR_NAME).azurecr.io/$(imageRepository):$(tag)
        ls -la $(Build.SourcesDirectory)/coverage
        docker tag demonodeapp:$(tag) $(ACR_NAME).azurecr.io/$(imageRepository):$(tag)
        docker push $(ACR_NAME).azurecr.io/$(imageRepository):$(tag)
      displayName: 'Build and Push docker and Copy test report'
      env:
       ENV_ACR_USERNAME: $(ACR_USERNAME) # Set as secret pipeline variable
       ENV_ACR_PASSWORD: $(ACR_PASSWORD) # Set as secret pipeline variable

    - upload: manifests
      artifact: manifests
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Coverage Reports'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/coverage'
        ArtifactName: 'coverage-reports'

- stage: Deploy Dev
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'releasepipeline.kube-public'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
- stage: Deploy_Staging
  displayName: Deploy to Staging
  dependsOn: Build
  
  jobs:
  - deployment: DeployToStaging
    displayName: Deploy to Staging
    pool:
      vmImage: $(vmImageName)
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes Cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment-staging.yml
                $(Pipeline.Workspace)/manifests/service-staging.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)